name: Android Gradle Runner

description: |
  Java/Android SDK をセットアップし、Gradle タスクを実行するコンポジットアクション。
  Secrets をファイルと環境変数に注入し、実行後にクリーンアップします。

inputs:
  gradle-args:
    description: 実行する Gradle タスク（スペース区切り）
    required: true
  working-directory:
    description: Gradle 実行ディレクトリ
    required: false
    default: .
  java-version:
    description: 使用する Java バージョン
    required: false
    default: '21'
  android-api-level:
    description: セットアップする Android API レベル
    required: false
    default: '34'
  android-platform:
    description: インストールする platforms;android-* の指定
    required: false
    default: 'android-36'
  android-build-tools:
    description: インストールする build-tools バージョン
    required: false
    default: '36.0.0'
  maps-api-key:
    description: Google Maps API キー
    required: false
    default: ''
  play-service-account-json:
    description: Play Developer API 用サービスアカウント JSON
    required: false
    default: ''
  android-keystore-base64:
    description: Base64 でエンコードした Android 署名キーストア
    required: false
    default: ''
  android-keystore-password:
    description: 署名キーストアのパスワード
    required: false
    default: ''
  android-key-alias:
    description: 署名キーのエイリアス
    required: false
    default: ''
  android-key-alias-password:
    description: 署名キーのパスワード
    required: false
    default: ''
  ensure-android-components:
    description: Android SDK コンポーネントを確実にインストールするかどうか
    required: false
    default: 'false'
  required-build-tools:
    description: 必須の build-tools バージョン（カンマ区切り）
    required: false
    default: ''
  required-platforms:
    description: 必須の platforms;android-* 指定（カンマ区切り）
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: 環境変数を設定
      shell: bash
      run: |
        echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> "$GITHUB_ENV"
        echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> "$GITHUB_ENV"

    - name: JDK をセットアップ
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ inputs.java-version }}
        cache: gradle

    - name: Gradle キャッシュを構成
      uses: gradle/actions/setup-gradle@v4

    - name: Android SDK をセットアップ
      if: ${{ inputs.ensure-android-components == 'true' }}
      uses: android-actions/setup-android@v3
      with:
        packages: ''

    - name: 必要な Android コンポーネントを確認
      if: ${{ inputs.ensure-android-components == 'true' }}
      shell: bash
      env:
        REQUIRED_BUILD_TOOLS: ${{ inputs.required-build-tools }}
        REQUIRED_PLATFORMS: ${{ inputs.required-platforms }}
      run: |
        set -euo pipefail
        export ANDROID_HOME=${ANDROID_HOME:-/usr/local/lib/android/sdk}
        export ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}

        install_component() {
          local component="$1"
          local type="${component%%;*}"
          local value="${component#*;}"
          local target_path=""

          case "$type" in
            build-tools)
              target_path="$ANDROID_SDK_ROOT/build-tools/$value"
              ;;
            platforms)
              target_path="$ANDROID_SDK_ROOT/platforms/$value"
              ;;
            platform-tools)
              target_path="$ANDROID_SDK_ROOT/platform-tools"
              ;;
            *)
              target_path=""
              ;;
          esac

          if [ -n "$target_path" ] && [ -d "$target_path" ]; then
            echo "${component} は既にインストール済み"
            return
          fi

          echo "${component} をインストールします"
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "$component"
        }

        IFS=',' read -r -a build_tools <<<"${REQUIRED_BUILD_TOOLS}"
        for item in "${build_tools[@]}"; do
          trimmed="$(echo "$item" | xargs)"
          if [ -n "$trimmed" ]; then
            install_component "build-tools;$trimmed"
          fi
        done

        IFS=',' read -r -a platforms <<<"${REQUIRED_PLATFORMS}"
        for item in "${platforms[@]}"; do
          trimmed="$(echo "$item" | xargs)"
          if [ -n "$trimmed" ]; then
            install_component "platforms;$trimmed"
          fi
        done

    - name: Gradle ラッパーに実行権限を付与
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: chmod +x ./gradlew

    - name: Secrets を注入
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        MAPS_API_KEY_INPUT: ${{ inputs.maps-api-key }}
        PLAY_JSON_INPUT: ${{ inputs.play-service-account-json }}
        KEYSTORE_BASE64_INPUT: ${{ inputs.android-keystore-base64 }}
        KEYSTORE_PASSWORD_INPUT: ${{ inputs.android-keystore-password }}
        KEY_ALIAS_INPUT: ${{ inputs.android-key-alias }}
        KEY_ALIAS_PASSWORD_INPUT: ${{ inputs.android-key-alias-password }}
      run: |
        set -euo pipefail
        if [ -n "${MAPS_API_KEY_INPUT}" ]; then
          printf 'MAPS_API_KEY=%s\n' "${MAPS_API_KEY_INPUT}" > local.properties
        fi

        mkdir -p gradle

        if [ -n "${KEYSTORE_BASE64_INPUT}" ]; then
          printf '%s' "${KEYSTORE_BASE64_INPUT}" | base64 --decode > gradle/keystore.jks
        fi

        if [ -n "${PLAY_JSON_INPUT}" ]; then
          printf '%s' "${PLAY_JSON_INPUT}" > gradle/play-service-account.json
        fi

        if [ -n "${KEYSTORE_PASSWORD_INPUT}" ]; then
          printf 'ANDROID_KEYSTORE_PASSWORD=%s\n' "${KEYSTORE_PASSWORD_INPUT}" >> "$GITHUB_ENV"
        fi

        if [ -n "${KEY_ALIAS_INPUT}" ]; then
          printf 'ANDROID_KEY_ALIAS=%s\n' "${KEY_ALIAS_INPUT}" >> "$GITHUB_ENV"
        fi

        if [ -n "${KEY_ALIAS_PASSWORD_INPUT}" ]; then
          printf 'ANDROID_KEY_ALIAS_PASSWORD=%s\n' "${KEY_ALIAS_PASSWORD_INPUT}" >> "$GITHUB_ENV"
        fi

    - name: Gradle タスクを実行
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: ./gradlew ${{ inputs.gradle-args }} --stacktrace --no-daemon

    - name: Secrets ファイルを削除
      if: always()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        rm -f local.properties
        rm -f gradle/keystore.jks
        rm -f gradle/play-service-account.json

branding:
  icon: play-circle
  color: blue
